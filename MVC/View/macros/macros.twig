{% macro createHTMLTag( tagName, attributes, bem, innerHtml, selfClosing ) %}
   {% spaceless %}
      {% import _self as mcro %}
      {% set class = mcro.bem(bem) %}
      {% set tmpAttributes = [] %}
      {% if attributes is defined and attributes is iterable %}
        {% for key, val in attributes %}
            {% set tmpAttributes = tmpAttributes | merge(['%s="%s"' | format(key, val)]) %}
        {% endfor %}
      {% endif %}
      <{{ tagName }} class="{{ class }}" {{ tmpAttributes | join(' ') | raw }}{% if selfClosing is not defined or selfClosing == false %}>{%
      endif %}{% if innerHtml is defined and innerHtml | length > 0 %}{{ innerHtml|raw }}{% endif %}
      {% if selfClosing is defined and selfClosing == true %}/>{% else %}</{{ tagName }}>{% endif %}
   {% endspaceless %}
{% endmacro %}

{% macro bem(bem) %}
{% set classname = '' %}
{% for item in bem %}
{# set create the block and element #}
{% set block__element = (item.block ? item.block ~ ( item.element ? '__' ~ item.element : '' ) : '') %}
{# if is block, modifier needs print as new string. IE block__element block__element--modifier #}
{# add to output variable #}
{% set classname = classname ~ ' ' ~ block__element %}
{# if there are modifiers add the after the base block/modifier IE block__element block__element--modifier #}
{% if item.modifier %}
{% for modifier in item.modifier %}
{% set classname = classname ~ (' ' ~ block__element ~ '--' ~ modifier) %}
{% endfor %}{% endif %}{% endfor %}{{classname}}{% endmacro %}

{# {% macro dump(value) %}
   {% import _self as mcro %}
   {{ mcro.createHTMLTag('pre', {}, [], dump(value) ) }}
{% endmacro %} #}
